name: 'Backend Continuous Deployment'
on:
  workflow_dispatch:
  
  #push:
    branches:
      - main

env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: 'us-east-1'

jobs:
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Python
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv' 

      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != true
        run: |
          cd backend && curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
          pipenv install

      - name: Install flake8 using pipenv
        if: steps.cache.outputs.cache-hit != true
        run: |
          cd backend && pipenv install flake8

      - name: Lint using flake8
        run: cd backend && pipenv run flake8 .

  test:
    name: 'Test'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Python
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv' 

      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pipenv-${{ hashFiles('Pipfile.lock') }}
      
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != true
        run: |
          cd backend && curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
          pipenv install

      - name: Run test
        run: cd backend && pipenv run test

  build:
    name: 'Build'
    needs: [lint, test]
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout repo
        uses: actions/checkout@v3

      # Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} 
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      # Login to AWS ECR
      - name: Login to Amazon ECR 
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend && docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: configure kubeconfig  
        run: |
          aws eks update-kubeconfig --region us-east-1 --name cluster

      - name: Deploy backend to Kubernetes cluster
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend/k8s
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          kustomize build | kubectl apply -f -
