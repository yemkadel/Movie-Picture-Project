name: 'Frontend Continuous Integration'
on:
  workflow_dispatch:
  
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '22.0.0'
  AWS_REGION: 'us-east-1'


jobs:
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.Js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v3
        id: cache 
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install npm dependency
        if: steps.cache.outputs.cache-hit != true
        run: cd frontend && npm ci

      - name: run lint
        run: cd frontend && npm run lint

  test:
    name: 'Test'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4

      # Setup Node.Js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v3
        id: cache 
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install npm dependency
        if: steps.cache.outputs.cache-hit != true
        run: cd frontend && npm ci

      - name: run test
        run: cd frontend && npm run test

  build:
    name: 'Build'
    needs: [lint, test]
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    steps:
      # Check out the code to the runner
        - name: Checkout repo
          uses: actions/checkout@v3
  
        # Configure AWS Credentials
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4 
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }} 
  
        # Login to AWS ECR
        - name: Login to Amazon ECR 
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
  
        - name: Build, tag, and push docker image to Amazon ECR.
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: frontend
            IMAGE_TAG: ${{ github.sha }}
            REACT_APP_MOVIE_API_URL: ${{ vars.REACT_APP_MOVIE_API_URL }}
          run: |
            cd frontend
            docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .